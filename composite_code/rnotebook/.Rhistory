cv.fit <- cv.glmnet(x[train.names,], y[train.names], family = "binomial",
type.logistic="modified.Newton", standardize = standardize,
lambda = grid, alpha=1, nfolds = length(train.names), #LOOCV
type.measure = "class", intercept = FALSE)
#Select lambda min.
lambda.min <- cv.fit$lambda.min
pred.class <- predict(fit, newx = x[test.names,], type="class", s=lambda.min)
tab <- table(pred.class,y[test.names])
testError <- mean(pred.class != y[test.names]) #how many predicted classes were incorrect
# fit the full dataset.
final <- glmnet(x, y,family = "binomial", standardize = standardize,
lambda = grid, alpha = 1, intercept = FALSE)
# extract coefficients
coef <- predict(final, type="coefficients", s=lambda.min)
idx <- which(!as.numeric(coef)==0)
nonZero <- coef[idx,]
# store results list
lassosubset.list <- list(train.names, test.names, contrast, fit,
cv.fit, tab, testError, final, nonZero, newseed)
names(lassosubset.list) <- c("training.set", "testing.set","contrast", "train.fit",
"cv.fit", "confusionMatrix","test.error", "final.model",
"nonzero.coef", "seednum")
lasso3.cofilt2.name <- "lasso_rep3_cofilt2_resultlist.rda"
lasso2.cofilt.name <- "lasso_rep2_cofilt1_resultlist.rda"
lasso1.nocofilt.name <- "lasso_rep1_nocofilt_resultlist.rda"
load("data/standardtable_mloutputs_summary.rda")
# get genes to rm
genes.exclude <- standtable[!standtable$lasso_coeff==0 | !standtable$lasso_rmCoeff==0,]$ensembl_gene_id
repnum = 0
se.subset <- degfilt.se[!rownames(degfilt.se) %in% genes.exclude,]
dim(se.subset) # [1] 1971  137
gene.names = as.character(rownames(rowData(se.subset)))
var.classifier = se.subset$deg.risk
glm.df = t(assay(se.subset))
trainset.names = colnames(assay(se.subset[,se.subset$exptset.seahack=="train"]))
testset.names = colnames(assay(se.subset[,se.subset$exptset.seahack=="test"]))
df = glm.df
train.names = trainset.names
test.names = testset.names
response <- var.classifier
predictors <- gene.names
y <- factor(response); names(y) <- colnames(assay(se.subset)) # response var obj
x = df[,colnames(df) %in% predictors] # genes of interest
dim(x)
contrast <- contrasts(y)
grid <- 10^ seq(10,-2, length=100)
standardize = FALSE
fit <- glmnet(x[train.names,], y[train.names], family = "binomial", alpha=1,
standardize = standardize, lambda = grid, intercept = FALSE)
# use cross-validation on the training model.CV only for lambda
newseed = 2019
set.seed(newseed)
cv.fit <- cv.glmnet(x[train.names,], y[train.names], family = "binomial",
type.logistic="modified.Newton", standardize = standardize,
lambda = grid, alpha=1, nfolds = length(train.names), #LOOCV
type.measure = "class", intercept = FALSE)
#Select lambda min.
lambda.min <- cv.fit$lambda.min
pred.class <- predict(fit, newx = x[test.names,], type="class", s=lambda.min)
tab <- table(pred.class,y[test.names])
testError <- mean(pred.class != y[test.names]) #how many predicted classes were incorrect
# fit the full dataset.
final <- glmnet(x, y,family = "binomial", standardize = standardize,
lambda = grid, alpha = 1, intercept = FALSE)
# extract coefficients
coef <- predict(final, type="coefficients", s=lambda.min)
idx <- which(!as.numeric(coef)==0)
nonZero <- coef[idx,]
# store results list
lasso3.cofilt2.name <- list(train.names, test.names, contrast, fit,
cv.fit, tab, testError, final, nonZero, newseed)
names(lasso3.cofilt2.name) <- c("training.set", "testing.set","contrast", "train.fit",
"cv.fit", "confusionMatrix","test.error", "final.model",
"nonzero.coef", "seednum")
save(lasso3.cofilt2.name, file=paste0(data.dir, sys.sep, lasso3.cofilt2.name))
lasso3.cofilt2.name
paste0(data.dir, sys.sep, lasso3.cofilt2.name)
lasso3.cofilt2.name <- "lasso_rep3_cofilt2_resultlist.rda"
lasso.rep3.cofilt2.resultlist <- list(train.names, test.names, contrast, fit,
cv.fit, tab, testError, final, nonZero, newseed)
names(lasso.rep3.cofilt2.resultlist) <- c("training.set", "testing.set","contrast", "train.fit",
"cv.fit", "confusionMatrix","test.error", "final.model",
"nonzero.coef", "seednum")
save(lasso.rep3.cofilt2.resultlist, file=paste0(data.dir, sys.sep, lasso3.cofilt2.name))
lr <- lasso.rep3.cofilt2.resultlist
coefgenes_dfsym = names(lr$nonzero.coef)
ncoefgenes_dfsym = rownames(seset[!rownames(seset) %in% coefgenes_dfsym,])
cgl = lr$nonzero.coef
coeffvect = c(as.numeric(cgl),
rep(0, nrow(seset[!rownames(seset) %in% names(cgl)]))
)
names(coeffvect) <- c(names(cgl), rownames(seset[!rownames(seset) %in% names(cgl)]))
coeffvect = coeffvect[order(match(names(coeffvect), rownames(standtable)))]
identical(names(coeffvect), rownames(standtable))
standtable$lasso_rep3_cofilt2 <- coeffvect
lr <- lasso.rep3.cofilt2.resultlist
coefgenes_dfsym = names(lr$nonzero.coef)
ncoefgenes_dfsym = rownames(degfilt.se[!rownames(degfilt.se) %in% coefgenes_dfsym,])
cgl = lr$nonzero.coef
coeffvect = c(as.numeric(cgl),
rep(0, nrow(seset[!rownames(seset) %in% names(cgl)]))
)
names(coeffvect) <- c(names(cgl), rownames(degfilt.se[!rownames(degfilt.se) %in% names(cgl)]))
coeffvect = coeffvect[order(match(names(coeffvect), rownames(standtable)))]
identical(names(coeffvect), rownames(standtable))
standtable$lasso_rep3_cofilt2 <- coeffvect
lr <- lasso.rep3.cofilt2.resultlist
coefgenes_dfsym = names(lr$nonzero.coef)
ncoefgenes_dfsym = rownames(degfilt.se[!rownames(degfilt.se) %in% coefgenes_dfsym,])
cgl = lr$nonzero.coef
coeffvect = c(as.numeric(cgl),
rep(0, nrow(degfilt.se[!rownames(degfilt.se) %in% names(cgl)]))
)
names(coeffvect) <- c(names(cgl), rownames(degfilt.se[!rownames(degfilt.se) %in% names(cgl)]))
coeffvect = coeffvect[order(match(names(coeffvect), rownames(standtable)))]
identical(names(coeffvect), rownames(standtable))
standtable$lasso_rep3_cofilt2 <- coeffvect
head(standtable)
save(standtable, file = paste0(data.dir, sys.sep, stdtable.name))
sys.sep = "/"
data.dir = "data"
seobj.dir = "seobjects"
figs.dir = "figures"
stdtable.name <- "standardtable_mloutputs_summary.rda"
degseset.name <- "seset_degseahack_targetaml.rda"
load(paste0(seobj.dir, sys.sep, degseset.name))
load(paste0(data.dir, sys.sep, stdtable.name))
degfiltset.name <- "sesetfilt_degseahack_targetaml.rda"
save(degfilt.se, file=paste0("data/",degfiltset.name))
cormat <- round(cor(t(assay(degfilt.se)), method="spearman"),3)
melted_cormat <- melt(cormat)
summary(as.data.frame(table(paste0(melted_cormat$Var1,";",melted_cormat$Var2))))
head(melted_cormat)
nrow(melted_cormat[melted_cormat$Var1==melted_cormat$Var2,])
goi <- rownames(standtable[!standtable$lasso_coeff==0 | !standtable$lasso_rmCoeff==0 | !standtable$lasso_rep3_cofilt2==0,])
cormat_filt <- round(cor(t(assay(degfilt.se[goi,])), method="spearman"),3)
melted_cormat_filt <- melt(cormat_filt)
melted_cormat_filt <- melted_cormat_filt[!melted_cormat_filt$Var1==melted_cormat_filt$Var2,]
plot(density(melted_cormat$value), col=rgb(0.2,0.2,0.8,alpha=0.2), lwd=2, lty=2,
xlim=c(-1.2,1.2), ylab="Relative Density", xlab="Rho", main="Gene Expr. Correlation Dist.")
lines(density(melted_cormat_filt$value), col=rgb(0.1,0.9,0.2),lwd=3, lty=1)
corhist.name <- "corplot_hist_deg-vs-lasso3reps.jpg"
jpeg(paste0(figs.dir, sys.sep, corhist.name), 6,4,units="in",res=400)
plot(density(melted_cormat$value), col=rgb(0.2,0.2,0.8,alpha=0.2), lwd=2, lty=2,
xlim=c(-1.2,1.2), ylab="Relative Density", xlab="Rho", main="Gene Expr. Correlation Dist.")
lines(density(melted_cormat_filt$value), col=rgb(0.1,0.9,0.2),lwd=3, lty=1)
legend("topright",bty="n",legend=c("All DEGs", "Lasso Genes\n(3 reps, with and\nwithout coeff. filt)"), col=c(rgb(0.2,0.2,0.8,alpha=0.2), rgb(0.1,0.9,0.2)), lwd=c(2,3),lty=c(2,1),cex=0.5)
dev.off()
mcf <- melted_cormat_filt
standtable$ensembl_gene_id
goi1 <- standtable[!standtable$lasso_coeff==0,]$ensembl_gene_id
goi2 <- standtable[!standtable$lasso_rmCoeff==0,]$ensembl_gene_id
mcf_12 <- mcf[mcf$Var1 %in% goi1 & mcf$Var2 %in% goi2,]
goi1 <- standtable[!standtable$lasso_coeff==0,]$ensembl_gene_id
goi2 <- standtable[!standtable$lasso_rmCoeff==0,]$ensembl_gene_id
mcf_12 <- mcf[mcf$Var1 %in% goi1 & mcf$Var2 %in% goi2,]
colnames(mcf_12) <- c("Rep1 Feature","Rep2 Feature","Rho")
corhm = ggplot(data = mcf_12, aes(x=mcf_12$`Rep1 Feature`, y=mcf_12$`Rep2 Feature`, fill=mcf_12$Rho)) +
geom_tile() +
scale_fill_gradientn(colours = colors) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Spearman Correlation Results\nLasso Selected Features\n(First run and CoeffFilt run)") +
xlab("Gene Feature 1") +
ylab("Gene Feature 2") +
labs(fill="Rho")
colnames(mcf_12) <- c("Rep1 Feature","Rep2 Feature","Rho")
corhm = ggplot(data = mcf_12, aes(x=mcf_12$`Rep1 Feature`, y=mcf_12$`Rep2 Feature`, fill=mcf_12$Rho)) +
geom_tile() +
scale_fill_gradientn(colours = colors) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Spearman Correlation Results\nLasso Selected Features\n(First run and CoeffFilt run)") +
xlab("Rep1 Feature") +
ylab("Rep2 Feature") +
labs(fill="Rho")
dim(mcf_12)
goi1 <- rownames(standtable[!standtable$lasso_coeff==0,])
goi2 <- rownames(standtable[!standtable$lasso_rmCoeff==0,])
mcf_12 <- mcf[mcf$Var1 %in% goi1 & mcf$Var2 %in% goi2,]
colnames(mcf_12) <- c("Rep1 Feature","Rep2 Feature","Rho")
corhm = ggplot(data = mcf_12, aes(x=mcf_12$`Rep1 Feature`, y=mcf_12$`Rep2 Feature`, fill=mcf_12$Rho)) +
geom_tile() +
scale_fill_gradientn(colours = colors) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Spearman Correlation Results\nLasso Selected Features\n(First run and CoeffFilt run)") +
xlab("Rep1 Feature") +
ylab("Rep2 Feature") +
labs(fill="Rho")
mcf_12
head(mcf_12)
ggplot(data = mcf_12, aes(x=mcf_12$`Rep1 Feature`,
y=mcf_12$`Rep2 Feature`,
fill=mcf_12$Rho)) +
geom_tile()
ggplot(data = mcf_12, aes(x=mcf_12$`Rep1 Feature`,
y=mcf_12$`Rep2 Feature`,
fill=mcf_12$Rho)) +
geom_tile() +
scale_fill_gradientn(colours = colors)
colors
colors <- colorRampPalette(c("blue", "green", "yellow", "red"))(42)
colors
ggplot(data = mcf_12, aes(x=mcf_12$`Rep1 Feature`,
y=mcf_12$`Rep2 Feature`,
fill=mcf_12$Rho)) +
geom_tile() +
scale_fill_gradientn(colours = colors)
ggplot(data = mcf_12, aes(x=mcf_12$`Rep1 Feature`,
y=mcf_12$`Rep2 Feature`,
fill=mcf_12$Rho)) +
geom_tile() +
scale_fill_gradientn(colours = colors) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Rep 2 Features") +
xlab("Rep1 Feature") +
ylab("Rep2 Feature") +
labs(fill="Rho")
goi1
goi1 <- rownames(standtable[!standtable$lasso_coeff==0,])
goi2 <- rownames(standtable[!standtable$lasso_rmCoeff==0,])
mcf_12 <- mcf[mcf$Var2 %in% goi1 & mcf$Var1 %in% goi2,]
colnames(mcf_12) <- c("Rep2 Feature","Rep1 Feature","Rho")
corhm12 = ggplot(data = mcf_12, aes(x=mcf_12$`Rep1 Feature`,
y=mcf_12$`Rep2 Feature`,
fill=mcf_12$Rho)) +
geom_tile() +
scale_fill_gradientn(colours = colors) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Spearman Corr. Matrix") +
xlab("Rep2 Feature") +
ylab("Rep1 Feature") +
labs(fill="Rho")
corhm12
goi1
goi1 <- rownames(standtable[!standtable$lasso_coeff==0,])
goi2 <- rownames(standtable[!standtable$lasso_rmCoeff==0,])
mcf_12 <- mcf[mcf$Var2 %in% goi1 & mcf$Var1 %in% goi2,]
colnames(mcf_12) <- c("Rep2 Feature","Rep1 Feature","Rho")
corhm12 = ggplot(data = mcf_12, aes(x=mcf_12$`Rep2 Feature`,
y=mcf_12$`Rep1 Feature`,
fill=mcf_12$Rho)) +
geom_tile() +
scale_fill_gradientn(colours = colors) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Spearman Corr. Matrix") +
xlab("Rep2 Feature") +
ylab("Rep1 Feature") +
labs(fill="Rho")
corhm12
goi1 <- rownames(standtable[!standtable$lasso_coeff==0,])
goi3 <- rownames(standtable[!standtable$lasso_rep3_cofilt2==0,])
# mcf_13 <- mcf[mcf$Var1 %in% goi1 & mcf$Var2 %in% goi3,]
mcf_13 <- mcf[mcf$Var2 %in% goi1 & mcf$Var1 %in% goi3,]
colnames(mcf_13) <- c("Rep1 Feature","Rep3 Feature","Rho")
corhm13 = ggplot(data = mcf_13, aes(x=mcf_13$`Rep3 Feature`,
y=mcf_13$`Rep1 Feature`,
fill=mcf_13$Rho)) +
geom_tile() +
scale_fill_gradientn(colours = colors) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Rep 3 Features") +
xlab("Rep3 Features") +
ylab("Rep1 Features") +
labs(fill="Rho")
draw(corhm12, corhm13)
corhm12+corhm13
corhm13
goi1 <- rownames(standtable[!standtable$lasso_coeff==0,])
goi3 <- rownames(standtable[!standtable$lasso_rep3_cofilt2==0,])
# mcf_13 <- mcf[mcf$Var1 %in% goi1 & mcf$Var2 %in% goi3,]
mcf_13 <- mcf[mcf$Var1 %in% goi1 & mcf$Var2 %in% goi3,]
colnames(mcf_13) <- c("Rep1 Feature","Rep3 Feature","Rho")
corhm13 = ggplot(data = mcf_13, aes(x=mcf_13$`Rep3 Feature`,
y=mcf_13$`Rep1 Feature`,
fill=mcf_13$Rho)) +
geom_tile() +
scale_fill_gradientn(colours = colors) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Rep 3 Features") +
xlab("Rep3 Features") +
ylab("Rep1 Features") +
labs(fill="Rho")
corhm13
goi2
goi3
goi1
goi3 <- rownames(standtable[!standtable$lasso_rep3_cofilt2==0,])
goi3
genes.exclude
load("data/standardtable_mloutputs_summary.rda")
# get genes to rm
genes.exclude <- rownames(standtable[!standtable$lasso_coeff==0 | !standtable$lasso_rmCoeff==0,])
repnum = 0
se.subset <- degfilt.se[!rownames(degfilt.se) %in% genes.exclude,]
dim(se.subset)
gene.names = as.character(rownames(rowData(se.subset)))
var.classifier = se.subset$deg.risk
glm.df = t(assay(se.subset))
trainset.names = colnames(assay(se.subset[,se.subset$exptset.seahack=="train"]))
testset.names = colnames(assay(se.subset[,se.subset$exptset.seahack=="test"]))
df = glm.df
train.names = trainset.names
test.names = testset.names
response <- var.classifier
predictors <- gene.names
y <- factor(response); names(y) <- colnames(assay(se.subset)) # response var obj
x = df[,colnames(df) %in% predictors] # genes of interest
dim(x)
contrast <- contrasts(y)
grid <- 10^ seq(10,-2, length=100)
standardize = FALSE
fit <- glmnet(x[train.names,], y[train.names], family = "binomial", alpha=1,
standardize = standardize, lambda = grid, intercept = FALSE)
# use cross-validation on the training model.CV only for lambda
newseed = 2019
set.seed(newseed)
cv.fit <- cv.glmnet(x[train.names,], y[train.names], family = "binomial",
type.logistic="modified.Newton", standardize = standardize,
lambda = grid, alpha=1, nfolds = length(train.names), #LOOCV
type.measure = "class", intercept = FALSE)
#Select lambda min.
lambda.min <- cv.fit$lambda.min
pred.class <- predict(fit, newx = x[test.names,], type="class", s=lambda.min)
tab <- table(pred.class,y[test.names])
testError <- mean(pred.class != y[test.names]) #how many predicted classes were incorrect
# fit the full dataset.
final <- glmnet(x, y,family = "binomial", standardize = standardize,
lambda = grid, alpha = 1, intercept = FALSE)
# extract coefficients
coef <- predict(final, type="coefficients", s=lambda.min)
idx <- which(!as.numeric(coef)==0)
nonZero <- coef[idx,]
# store results list
lasso.rep3.cofilt2.resultlist <- list(train.names, test.names, contrast, fit,
cv.fit, tab, testError, final, nonZero, newseed)
names(lasso.rep3.cofilt2.resultlist) <- c("training.set", "testing.set","contrast", "train.fit",
"cv.fit", "confusionMatrix","test.error", "final.model",
"nonzero.coef", "seednum")
save(lasso.rep3.cofilt2.resultlist, file=paste0(data.dir, sys.sep, lasso3.cofilt2.name))
gene.names = as.character(rownames(rowData(se.subset)))
var.classifier = se.subset$deg.risk
glm.df = t(assay(se.subset))
trainset.names = colnames(assay(se.subset[,se.subset$exptset.seahack=="train"]))
testset.names = colnames(assay(se.subset[,se.subset$exptset.seahack=="test"]))
df = glm.df
train.names = trainset.names
test.names = testset.names
response <- var.classifier
predictors <- gene.names
y <- factor(response); names(y) <- colnames(assay(se.subset)) # response var obj
x = df[,colnames(df) %in% predictors] # genes of interest
dim(x)
contrast <- contrasts(y)
grid <- 10^ seq(10,-2, length=100)
standardize = FALSE
fit <- glmnet(x[train.names,], y[train.names], family = "binomial", alpha=1,
standardize = standardize, lambda = grid, intercept = FALSE)
# use cross-validation on the training model.CV only for lambda
newseed = 2019
set.seed(newseed)
cv.fit <- cv.glmnet(x[train.names,], y[train.names], family = "binomial",
type.logistic="modified.Newton", standardize = standardize,
lambda = grid, alpha=1, nfolds = length(train.names), #LOOCV
type.measure = "class", intercept = FALSE)
#Select lambda min.
lambda.min <- cv.fit$lambda.min
pred.class <- predict(fit, newx = x[test.names,], type="class", s=lambda.min)
tab <- table(pred.class,y[test.names])
testError <- mean(pred.class != y[test.names]) #how many predicted classes were incorrect
# fit the full dataset.
final <- glmnet(x, y,family = "binomial", standardize = standardize,
lambda = grid, alpha = 1, intercept = FALSE)
# extract coefficients
coef <- predict(final, type="coefficients", s=lambda.min)
idx <- which(!as.numeric(coef)==0)
nonZero <- coef[idx,]
# store results list
lasso.rep3.cofilt2.resultlist <- list(train.names, test.names, contrast, fit,
cv.fit, tab, testError, final, nonZero, newseed)
names(lasso.rep3.cofilt2.resultlist) <- c("training.set", "testing.set","contrast", "train.fit",
"cv.fit", "confusionMatrix","test.error", "final.model",
"nonzero.coef", "seednum")
save(lasso.rep3.cofilt2.resultlist, file=paste0(data.dir, sys.sep, lasso3.cofilt2.name))
lr <- lasso.rep3.cofilt2.resultlist
coefgenes_dfsym = names(lr$nonzero.coef)
ncoefgenes_dfsym = rownames(degfilt.se[!rownames(degfilt.se) %in% coefgenes_dfsym,])
cgl = lr$nonzero.coef
coeffvect = c(as.numeric(cgl),
rep(0, nrow(degfilt.se[!rownames(degfilt.se) %in% names(cgl)]))
)
names(coeffvect) <- c(names(cgl), rownames(degfilt.se[!rownames(degfilt.se) %in% names(cgl)]))
coeffvect = coeffvect[order(match(names(coeffvect), rownames(standtable)))]
identical(names(coeffvect), rownames(standtable))
standtable$lasso_rep3_cofilt2 <- coeffvect
save(standtable, file = paste0(data.dir, sys.sep, stdtable.name))
goi1 <- rownames(standtable[!standtable$lasso_coeff==0,])
goi3 <- rownames(standtable[!standtable$lasso_rep3_cofilt2==0,])
# mcf_13 <- mcf[mcf$Var1 %in% goi1 & mcf$Var2 %in% goi3,]
mcf_13 <- mcf[mcf$Var1 %in% goi1 & mcf$Var2 %in% goi3,]
colnames(mcf_13) <- c("Rep1 Feature","Rep3 Feature","Rho")
corhm13 = ggplot(data = mcf_13, aes(x=mcf_13$`Rep3 Feature`,
y=mcf_13$`Rep1 Feature`,
fill=mcf_13$Rho)) +
geom_tile() +
scale_fill_gradientn(colours = colors) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Rep 3 Features") +
xlab("Rep3 Features") +
ylab("Rep1 Features") +
labs(fill="Rho")
corhm13
dim(mcf_13)
standtable[!standtable$lasso_rep3_cofilt2==0,]
dim(standtable[!standtable$lasso_rep3_cofilt2==0,])
goi1 <- rownames(standtable[!standtable$lasso_coeff==0,])
goi3 <- rownames(standtable[!standtable$lasso_rep3_cofilt2==0,])
mcf_13 <- mcf[mcf$Var1 %in% goi1 & mcf$Var2 %in% goi3,]
goi3
mcf <- melted_cormat_filt
goi1 <- rownames(standtable[!standtable$lasso_coeff==0,])
goi3 <- rownames(standtable[!standtable$lasso_rep3_cofilt2==0,])
# mcf_13 <- mcf[mcf$Var1 %in% goi1 & mcf$Var2 %in% goi3,]
mcf_13 <- mcf[mcf$Var1 %in% goi1 & mcf$Var2 %in% goi3,]
head(mcf)
goi1 <- rownames(standtable[!standtable$lasso_coeff==0,])
goi3 <- rownames(standtable[!standtable$lasso_rep3_cofilt2==0,])
head(mcf[mcf$Var1 %in% goi1 & mcf$Var2 %in% goi3,])
goi1
goi2
length(intersect(goi1,goi3))
goi3
table(mcf$Var2 %in% goi3)
cormat <- round(cor(t(assay(degfilt.se)), method="spearman"),3)
melted_cormat <- melt(cormat)
melted_cormat <- melted_cormat[!melted_cormat$Var1==melted_cormat$Var2,] # pre-filter
mcf <- melted_cormats
# rep1 vs rep2 genes
goi1 <- rownames(standtable[!standtable$lasso_coeff==0,])
goi2 <- rownames(standtable[!standtable$lasso_rmCoeff==0,])
mcf_12 <- mcf[mcf$Var2 %in% goi1 & mcf$Var1 %in% goi2,]
colnames(mcf_12) <- c("Rep2 Feature","Rep1 Feature","Rho")
corhm12 = ggplot(data = mcf_12, aes(x=mcf_12$`Rep2 Feature`,
y=mcf_12$`Rep1 Feature`,
fill=mcf_12$Rho)) +
geom_tile() +
scale_fill_gradientn(colours = colors) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Spearman Corr. Matrix") +
xlab("Rep2 Features") +
ylab("Rep1 Features") +
labs(fill="Rho")
# rep1 vs rep3 genes
goi1 <- rownames(standtable[!standtable$lasso_coeff==0,])
goi3 <- rownames(standtable[!standtable$lasso_rep3_cofilt2==0,])
# mcf_13 <- mcf[mcf$Var1 %in% goi1 & mcf$Var2 %in% goi3,]
mcf_13 <- mcf[mcf$Var1 %in% goi1 & mcf$Var2 %in% goi3,]
colnames(mcf_13) <- c("Rep1 Feature","Rep3 Feature","Rho")
corhm13 = ggplot(data = mcf_13, aes(x=mcf_13$`Rep3 Feature`,
y=mcf_13$`Rep1 Feature`,
fill=mcf_13$Rho)) +
geom_tile() +
scale_fill_gradientn(colours = colors) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Rep 3 Features") +
xlab("Rep3 Features") +
ylab("Rep1 Features") +
labs(fill="Rho")
corhm13
mcf <- melted_cormat
goi1 <- rownames(standtable[!standtable$lasso_coeff==0,])
goi2 <- rownames(standtable[!standtable$lasso_rmCoeff==0,])
mcf_12 <- mcf[mcf$Var2 %in% goi1 & mcf$Var1 %in% goi2,]
colnames(mcf_12) <- c("Rep2 Feature","Rep1 Feature","Rho")
corhm12 = ggplot(data = mcf_12, aes(x=mcf_12$`Rep2 Feature`,
y=mcf_12$`Rep1 Feature`,
fill=mcf_12$Rho)) +
geom_tile() +
scale_fill_gradientn(colours = colors) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Spearman Corr. Matrix") +
xlab("Rep2 Features") +
ylab("Rep1 Features") +
labs(fill="Rho")
goi1 <- rownames(standtable[!standtable$lasso_coeff==0,])
goi3 <- rownames(standtable[!standtable$lasso_rep3_cofilt2==0,])
# mcf_13 <- mcf[mcf$Var1 %in% goi1 & mcf$Var2 %in% goi3,]
mcf_13 <- mcf[mcf$Var1 %in% goi1 & mcf$Var2 %in% goi3,]
colnames(mcf_13) <- c("Rep1 Feature","Rep3 Feature","Rho")
corhm13 = ggplot(data = mcf_13, aes(x=mcf_13$`Rep3 Feature`,
y=mcf_13$`Rep1 Feature`,
fill=mcf_13$Rho)) +
geom_tile() +
scale_fill_gradientn(colours = colors) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Rep 3 Features") +
xlab("Rep3 Features") +
ylab("Rep1 Features") +
labs(fill="Rho")
corhm13
corhm12+corhm13
corhm12
corhm.name.13 = "corplot_lasso-rep1-vs-rep3.jpg"
jpeg(paste0(figs.dir, sys.sep, corhm.name.13), 7, 7, units="in", res=400)
corhm + scale_colour_gradientn(colours=rainbow(4))
dev.off()
corhm.name.13 = "corplot_lasso-rep1-vs-rep3.jpg"
jpeg(paste0(figs.dir, sys.sep, corhm.name.13), 7, 7, units="in", res=400)
corhm13 + scale_colour_gradientn(colours=rainbow(4))
dev.off()
corhm.name.12 = "corplot_lasso-rep1-vs-rep2.jpg"
jpeg(paste0(figs.dir, sys.sep, corhm.name.12), 7, 7, units="in", res=400)
corhm12 + scale_colour_gradientn(colours=rainbow(4))
dev.off()
